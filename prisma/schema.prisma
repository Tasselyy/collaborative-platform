generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Visibility {
  PRIVATE
  PUBLIC
  TEAM
}

model Team {
  id        String    @id @default(cuid())
  name      String
  members   User[]    @relation("TeamMembership")
  datasets  Dataset[] 
  createdAt DateTime  @default(now())
}

model User {
  id        String    @id @default(cuid())
  name      String?
  email     String?   @unique
  image     String?
  datasets  Dataset[]
  comments  Comment[]
  teams     Team[]    @relation("TeamMembership")
  createdAt DateTime  @default(now())
  accounts  Account[]
  sessions  Session[]
  emailVerified  DateTime?
}

model Dataset {
  id             String          @id @default(cuid())
  name           String
  description    String?
  fileUrl        String
  ownerId        String
  owner          User            @relation(fields: [ownerId], references: [id])
  visibility     Visibility      @default(PRIVATE)
  teamId         String?
  team           Team?           @relation(fields: [teamId], references: [id])
  visualizations Visualization[]
  createdAt      DateTime        @default(now())
}

model Visualization {
  id            String        @id @default(cuid())
  title         String
  type          String        // e.g. "bar", "line"
  config        Json          // Chart config
  datasetId     String
  dataset       Dataset       @relation(fields: [datasetId], references: [id])
  comments      Comment[]
  createdAt     DateTime      @default(now())
}

model Comment {
  id            String         @id @default(cuid())
  content       String
  authorId      String
  vizId         String
  author        User           @relation(fields: [authorId], references: [id])
  visualization Visualization  @relation(fields: [vizId], references: [id])
  createdAt     DateTime       @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
