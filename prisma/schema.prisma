
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Visibility {
  PRIVATE
  PUBLIC
  TEAM
}

enum TeamRole {
  OWNER
  MEMBER
}

model Team {
  id          String        @id @default(cuid())
  name        String
  description String?       // Adding description field
  members     TeamMember[]  // Changed to use the join table
  datasets    Dataset[]
  createdAt   DateTime      @default(now())
}

// New join table to track team membership details
model TeamMember {
  id        String    @id @default(cuid())
  team      Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  role      TeamRole  @default(MEMBER)
  joinedAt  DateTime  @default(now())

  @@unique([teamId, userId]) // Ensure a user can only be in a team once
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  password      String?
  image         String?
  datasets      Dataset[]
  comments      Comment[]
  teams         TeamMember[] // Changed to use the join table
  createdAt     DateTime     @default(now())
  accounts      Account[]
  sessions      Session[]
  emailVerified Boolean?
  updatedAt     DateTime    @updatedAt

  @@map("user")
}

model Dataset {
  id             String          @id @default(cuid())
  name           String
  description    String?
  fileUrl        String
  fileName       String
  ownerId        String
  owner          User            @relation(fields: [ownerId], references: [id])
  visibility     Visibility      @default(PRIVATE)
  teamId         String?
  team           Team?           @relation(fields: [teamId], references: [id])
  visualizations Visualization[]
  createdAt      DateTime        @default(now())
}

model Visualization {
  id          String    @id @default(cuid())
  title       String
  description String?
  type        String           // e.g. "bar", "line", etc.
  config      Json             // full chart config: options + data + customSettings
  datasetId   String
  dataset     Dataset          @relation(fields: [datasetId], references: [id])
  comments    Comment[]
  createdAt   DateTime  @default(now())
}

model Comment {
  id            String        @id @default(cuid())
  content       String
  authorId      String
  vizId         String
  author        User          @relation(fields: [authorId], references: [id])
  visualization Visualization @relation(fields: [vizId], references: [id])
  createdAt     DateTime      @default(now())
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
